dashboard_import:
  package_import_url: github://btmbpl/supersonic/supersonic.yaml@main
  import_full_config: true
#
substitutions:
  devname: supersonic
#
esphome:
  name: supersonic
  friendly_name: supersonic
  project:
    name: btm.wmbus
    version: "1.0"
#
esp8266:
  board: esp01_1m
#
logger:
  level: WARN
  baud_rate: 0
#
api:
  encryption:
    key: "adKapv9Sww3o8iXUVA+4J9lSpr/uOfVbNfjM81YaKgE="
#
ota:
  - platform: esphome
    password: "5b753bff551d809e874d733064f8fddc"
#
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "supersonic"
    #password: "12345678"
#
packages:
  maintenance: !include common/maintenance.yaml
#
captive_portal:
sensor:
### Kod Główny ###
  - platform: ultrasonic
    trigger_pin: 
      number: GPIO14
      allow_other_uses: true
    echo_pin: 
      number: GPIO12
      allow_other_uses: true
    name: "Ultrasonic Sensor"
    id: us
    update_interval: 5s
    pulse_time: 50us
    timeout: 10m
    unit_of_measurement: "m"
    device_class: volume_storage
    accuracy_decimals: 3
    filters: 
      - lambda: |-
          float MIN_VALUE = 0.20;
          float MAX_VALUE = id(wy).state;
          if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
          else return {};
      - lambda: return x - id(of).state;
      - median:
         window_size: 5
         send_every: 5
         send_first_at: 1
      - delta : 0.01
      - filter_out: nan
#      - calibrate_polynomial:
#         degree: 3
#         datapoints:
#          - 0.0 -> 0.0
### Inverted ###
  - platform: ultrasonic
    trigger_pin: 
      number: GPIO14
      allow_other_uses: true
    echo_pin: 
      number: GPIO12
      allow_other_uses: true
    name: "Ultrasonic Sensor Inv"
    id: us1
    update_interval: 5s
    pulse_time: 20us
    timeout: 5m
    unit_of_measurement: "m"
    device_class: volume_storage
    accuracy_decimals: 3
    filters: 
      - lambda: |-
          float MIN_VALUE = 0.20;
          float MAX_VALUE = id(wy).state;
          if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
          else return {};
      - lambda: return (id(wy).state) - (x - id(of).state);
      - median:
         window_size: 5
         send_every: 5
         send_first_at: 1
      - delta : 0.01
      - filter_out: nan
### Koniec Kodu Głównego ###
#
### Template ###
  - platform: template
    name: "Usable"
    id: watertank_percent
    icon: 'mdi:cup-water'
    unit_of_measurement: '%'
    update_interval: 5s #the delta filter will ensure it only sends values when something changes. 
    lambda: |-
      return ((id(wy).state - id(us).state) / id(wy).state)*100;
    filters:
      - median:
          window_size: 5 #creates a moving average of the last 10 values
          send_every: 5 #sends the moving average at every measurement (but only if it passes the delta filter below)) 
          send_first_at: 1 #after startup immediately start sending the result rather than wait for the first 10 measurements
#      - delta : 0.1 #only send the result if the difference with the last sent result is higher than this
      - filter_out: nan
### Koniec Template ###
number:
  - platform: template
    name: "wysokość (m)"
    id: wy
    optimistic: true
    min_value: 0
    max_value: 500
    initial_value: 1
    step: 0.01
    mode: box
    restore_value: true
#
  - platform: template
    name: "offset (m)"
    id: of
    optimistic: true
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 0.01
    mode: box
    restore_value: true